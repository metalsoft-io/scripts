$METALCLOUD_ENDPOINT = $env:METALCLOUD_ENDPOINT
$METALCLOUD_VERIFY_SSL = [System.Convert]::ToBoolean($env:METALCLOUD_VERIFY_SSL)
$METALCLOUD_API_KEY = $env:METALCLOUD_API_KEY

if (-not $METALCLOUD_ENDPOINT) {
    Write-Error "METALCLOUD_ENDPOINT environment variable not set. The format should not include the /api/developer/developer and only the prefix, same as the CLI."
    exit 1
}

if (-not $METALCLOUD_API_KEY) {
    Write-Error "METALCLOUD_API_KEY environment variable not set."
    exit 1
}

if (-not $METALCLOUD_VERIFY_SSL) {
	$METALCLOUD_VERIFY_SSL=$True
}


function Make-ApiCall {
    param(
        [string]$method,
        [System.Collections.ArrayList]$params,
        [string]$endpoint = $env:METALCLOUD_ENDPOINT,
        [string]$api_key = $env:METALCLOUD_API_KEY,
        [bool]$verify_ssl = $METALCLOUD_VERIFY_SSL
    )

    if (-not $endpoint -or -not $api_key) {
        throw "endpoint or api_key parameters are required"
    }

    $call_params = @{
        "id"      = 0
        "jsonrpc" = "2.0"
        "method"  = $method
        "params"  = $params
    } | ConvertTo-Json -Compress 

    $md5=New-Object System.Security.Cryptography.HMACMD5
    $md5.key= [System.Text.Encoding]::UTF8.GetBytes($api_key)
    $call_params_bytes=[System.Text.Encoding]::UTF8.GetBytes($call_params)
    $hash_bytes=$md5.ComputeHash($call_params_bytes)
    $hash= -join($hash_bytes |ForEach-Object ToString X2)

    $url = "{0}/{1}?verify={2}:{3}" -f $endpoint.TrimEnd("/"), "api/developer/developer", ($api_key -split ":")[0], $hash

    #return $url
    #exit 1

    $headers = @{
        "Content-Type" = "application/json"
    }


    #return $call_params
    $response = Invoke-RestMethod -StatusCodeVariable "statusCode" -Uri $url -Method Post -Body $call_params -Headers $headers -UseBasicParsing -SkipCertificateCheck:(-not $verify_ssl)
    if ($statusCode -ne 200) {
        throw "API call failed: $($response)"
    }

    return $response
}

$USER_ID = ($METALCLOUD_API_KEY -split ":")[0]

function Get-Infrastructures {
    param(
        [string]$user_id
    )

    return Make-ApiCall -method "infrastructures" -params @($user_id)
}

Get-Infrastructures -user_id $USER_ID | ConvertTo-Json
