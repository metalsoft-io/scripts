#!/bin/bash
# vi: et st=2 sts=2 ts=2 sw=2 cindent bg=dark ft=sh

if [ "$EUID" -ne 0 ];then
	echo -e "[\e[1;31m✗\e[0m] Please run as root"
	exit 1
fi

if ! type jq > /dev/null 2>&1;then echo Error: Please install package: jq; exit 1;fi
test -z "$cip" && cip="$(ip r get 1 2>/dev/null | head -1 | awk '{print $7}')"
if [ "$(echo "$cip" | wc -m)" -le 3 ]; then
    # Try IPv6 if IPv4 fails
    cip="$(ip -6 r get 2001:db8::1 2>/dev/null | head -1 | awk '{print $11}')"
fi

newhostname="$1"
path_ssl_key="$2"
path_ssl_crt="$3"
me="$(basename $0)"
MS_MANIFESTS_FOLDER=${MS_MANIFESTS_FOLDER:-/root/manifests}

usage ()
{
	echo -e "Usage: ${bold}${me}${nc} ${lightgreen}newHostname.com${nc} [${bold}path_to_ssl_key.pem path_to_ssl_crt.pem${nc}]\n${bold}MS_SSL_KEY${nc} & ${bold}MS_SSL_CRT${nc} env variables can be used instead of PEM files to provide base64 encoded key and crt\n${bold}MS_MANIFESTS_FOLDER${nc} env variable can optionally be used to specify the manifests folder. Default is: /root/manifests"
}

function isIPv6() {
    # More comprehensive IPv6 validation
    [[ $1 =~ ^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$ ]] && return 0
    [[ $1 =~ ^::1$ ]] && return 0
    [[ $1 =~ ^::$ ]] && return 0
    [[ $1 =~ ^::([0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{0,4}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,7}:$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}$ ]] && return 0
    [[ $1 =~ ^[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})$ ]] && return 0
    return 1
}

function isIPv4() {
    [[ $1 =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]] && return 0
    return 1
}

nc="\e[00m"
bold="\e[1;37m"
gray="\e[2;37m"
lightred="\e[1;31m"
lightgreen="\e[1;32m"
yellow="\e[1;33m"
pink="\e[1;35m"

function debuglog ()
{
	msg="$1"
	mtype="${2:-info}"
	case "$mtype" in
		'fail') mtypeis="[\e[1;31m✗\e[0m]"; color=${3:-lightred} ;;
		'success') mtypeis="[\e[1;32m✓\e[0m]"; color=${3:-lightgreen} ;;
		*) mtypeis="${bold}[i]${nc}"; color=${3:-bold} ;;
	esac
	echo -e "${mtypeis} ${!color}${msg}${nc}"
}
if ! [ -n "$newhostname" -a "$(echo -n "$newhostname"|wc -c)" -ge 5 -a "$(echo -n "$newhostname"|grep '\.'|wc -l)" -ge 1 ];then usage; exit 1;fi

if [ ! -f /etc/.ms_hostname ];then echo "$newhostname" > /etc/.ms_hostname 2>/dev/null;fi
test -n "$hn" && sed -i "/\b${hn}\b/d" /etc/hosts && echo "$cip $hn cluster.demo.metalsoft.io controller-demo.metalsoft.io $main_domain" >> /etc/hosts
grep -q " \b$newhostname\b" /etc/hosts || echo "$cip $newhostname" >> /etc/hosts 2>/dev/null

namespace="$(kubectl get po -A --no-headers|awk '{print $1}'|sort|uniq|grep metalsoft|head -1)"
test -z "$namespace" && namespace='demo-metalsoft'

test -d "${MS_MANIFESTS_FOLDER}" && cd "${MS_MANIFESTS_FOLDER}" || { debuglog "Error: ${MS_MANIFESTS_FOLDER} is missing. Manifests are needed for this update to work properly " fail; exit 3; }

if [ -f "${MS_MANIFESTS_FOLDER}/secrets.yaml" ]; then
	current_b64_crt=$(grep 'tls\.crt:' "${MS_MANIFESTS_FOLDER}/secrets.yaml" | awk '{print $2}')
	current_b64_key=$(grep 'tls\.key:' "${MS_MANIFESTS_FOLDER}/secrets.yaml" | awk '{print $2}')
	if [ -n "$current_b64_crt" ]; then
		secret_cn=$(echo "$current_b64_crt" | base64 -d 2>/dev/null | openssl x509 -subject -noout 2>/dev/null | sed 's/^subject=//g;s/, /\n/g' | grep '^CN' | cut -d'=' -f2 |head -1| xargs)
		if [ -n "$secret_cn" ]; then
			secret_backup_crt_path="$HOME/.ms_ssl_${secret_cn}.crt"
			secret_backup_key_path="$HOME/.ms_ssl_${secret_cn}.key"
			if [ ! -f "$secret_backup_crt_path" ]; then
				debuglog "Backing up existing SSL certificate for ${secret_cn} from secrets.yaml..." info
				echo "$current_b64_crt" | base64 -d > "$secret_backup_crt_path"
				echo "$current_b64_key" | base64 -d > "$secret_backup_key_path"
			fi
		fi
	fi
fi


#test -n "$3" || { debuglog "Error: Not all required parameters were proivided" fail; usage; exit 1; }
if [ -n "$path_ssl_key" ];then
	test -r "${path_ssl_key}" || { debuglog "Error: Path to SSL key is wrong: '${path_ssl_key}'" fail; usage; exit 3; }
	test -r "${path_ssl_crt}" || { debuglog "Error: Path to SSL crt is wrong: '${path_ssl_crt}'" fail; usage; exit 3; }

	# test KEY file and crt file
	key_header=$(head -n 1 "$path_ssl_key")
	case "$key_header" in
		"-----BEGIN RSA PRIVATE KEY-----")
			#echo -e "${lightgreen}✔ KEY: $path_ssl_key = PKCS#1 (RSA) unencrypted${nc}"
			echo -n '' # key is supported
			;;
		"-----BEGIN PRIVATE KEY-----")
			#echo -e "${lightgreen}✔ KEY: $path_ssl_key = PKCS#8 unencrypted${nc}"
			echo -n '' # key is supported
			;;
		"-----BEGIN ENCRYPTED PRIVATE KEY-----")
			echo -e "${lightred}✘ KEY: $path_ssl_key = Encrypted private key - not supported${nc}"
			exit 1
			;;
		"-----BEGIN OPENSSH PRIVATE KEY-----")
			echo -e "${lightred}✘ KEY: $path_ssl_key = OpenSSH private key – not supported${nc}"
			exit 1
			;;
		*)
			echo -e "${lightred}✘ KEY: $path_ssl_key = Unknown key format${nc}"
			exit 1
			;;
	esac

	if ! openssl x509 -in "$path_ssl_crt" -noout >/dev/null 2>&1; then
		echo -e "${lightred}✘ CRT: $path_ssl_crt = Invalid certificate${nc}"
		exit 1
	fi

	cert_mod=$(openssl x509 -noout -modulus -in "$path_ssl_crt" 2>/dev/null | openssl md5)
	key_mod=$(openssl rsa -noout -modulus -in "$path_ssl_key" 2>/dev/null | openssl md5)

	if [[ "$cert_mod" != "$key_mod" ]]; then
		echo -e "${lightred}✘ Key does NOT match certificate${nc}"
		exit 1
	fi

	ssl_sans=$(openssl x509 -in "$path_ssl_crt" -noout -text | grep -A1 "Subject Alternative Name" | tail -n1|xargs)
	ssl_eku=$(openssl x509 -in "$path_ssl_crt" -noout -text | grep -A1 "Extended Key Usage" | tail -n1|xargs)
	test -n "$path_ssl_crt" && echo "SSL SANs: $ssl_sans"
	test -n "$path_ssl_crt" && echo "SSL EKU: $ssl_eku"

else
	if [ -z "$MS_SSL_KEY" -a -z "$MS_SSL_CRT" -a -z "$MS_NO_GEN_SSL" ];then
		backup_crt_path="$HOME/.ms_ssl_${newhostname}.crt"
		backup_key_path="$HOME/.ms_ssl_${newhostname}.key"
		if [ -f "$backup_crt_path" ] && [ -f "$backup_key_path" ]; then
			debuglog "Found (and will use) existing SSL certificate for $newhostname." success
			path_ssl_crt="$backup_crt_path"
			path_ssl_key="$backup_key_path"
		else
			if [ ! -f "/etc/.ms_ca.crt" ] || [ ! -f "/etc/.ms_ca.key" ]; then
				debuglog "CA certificate not found. Attempting to generate a new one..." info
				openssl req -x509 -nodes -newkey rsa:4096 -sha256 -keyout /etc/.ms_ca.key -out /etc/.ms_ca.crt -days 3650 -subj "/C=US/ST=State/L=City/O=MetalsoftDemo-$(date +%Y%m%d%H%M%S)/OU=IT/CN=MetalSoftDemo-Root-CA" >/dev/null 2>&1
				if [ $? -ne 0 ]; then
					debuglog "Failed to generate CA certificate. Continuing without SSL update." fail
				else
					debuglog "Successfully generated CA certificate." success
					# Add CA to local trusted certificates
					debuglog "Adding CA certificate to local trusted certificates..." info
					if [ -f /etc/os-release ]; then
						. /etc/os-release
						case "$ID" in
							ubuntu|debian)
								if [ -d "/usr/local/share/ca-certificates" ]; then
									cp /etc/.ms_ca.crt /usr/local/share/ca-certificates/metalsoft-demo-ca.crt
									update-ca-certificates >/dev/null 2>&1
									# if [ $? -eq 0 ]; then
									# 	debuglog "CA certificate added to Ubuntu/Debian trusted store." success
									# else
									# 	debuglog "Failed to update CA certificates on Ubuntu/Debian." fail
									# fi
								fi
								;;
							rhel|centos|fedora|rocky|almalinux)
								if [ -d "/etc/pki/ca-trust/source/anchors" ]; then
									cp /etc/.ms_ca.crt /etc/pki/ca-trust/source/anchors/metalsoft-demo-ca.crt
									update-ca-trust >/dev/null 2>&1
									# if [ $? -eq 0 ]; then
									# 	debuglog "CA certificate added to RHEL/CentOS trusted store." success
									# else
									# 	debuglog "Failed to update CA certificates on RHEL/CentOS." fail
									# fi
								fi
								;;
							# *)
							# 	debuglog "Unknown OS distribution. CA certificate not added to trusted store." info
							# 	;;
						esac
					else
						debuglog "Cannot determine OS distribution. CA certificate not added to trusted store." info
					fi
				fi
			fi

			if [ -f "/etc/.ms_ca.crt" ]; then
				debuglog "Found CA at /etc/.ms_ca.crt. Generating new SSL certificate for $newhostname." info
				if [ ! -f "/etc/.ms_ca.key" ]; then
					debuglog "CA certificate found, but CA key /etc/.ms_ca.key is missing. Cannot generate new certificate." fail
				else
					# Generate new SSL cert and key
					TMP_DIR=$(mktemp -d)
					path_ssl_key="${TMP_DIR}/${newhostname}.key"
					path_ssl_crt="${TMP_DIR}/${newhostname}.crt"
					local_csr_config="${TMP_DIR}/${newhostname}.cnf"
					local_csr="${TMP_DIR}/${newhostname}.csr"

					# Using a trap to clean up the temp directory on exit
					trap "rm -rf ${TMP_DIR}" EXIT

					alt_name_field="DNS.1"
					if [[ $newhostname =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
						alt_name_field="IP.1"
					fi

					cat > "$local_csr_config" <<EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no
[req_distinguished_name]
CN = ${newhostname}
[v3_req]
subjectAltName = @alt_names
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
[alt_names]
${alt_name_field} = ${newhostname}
EOF
					openssl genrsa -out "$path_ssl_key" 2048 >/dev/null 2>&1
					openssl req -new -key "$path_ssl_key" -out "$local_csr" -config "$local_csr_config" >/dev/null 2>&1
					openssl x509 -req -in "$local_csr" -CA /etc/.ms_ca.crt -CAkey /etc/.ms_ca.key -CAserial "${TMP_DIR}/ca.srl" -CAcreateserial -out "$path_ssl_crt" -days 365 -sha256 -extfile "$local_csr_config" -extensions v3_req >/dev/null 2>&1

					if [ -s "$path_ssl_crt" ]; then
						debuglog "Successfully generated new SSL certificate and key." success
						#timestamp=$(date +%Y%m%d%H%M%S)
						backup_crt_path="$HOME/.ms_ssl_${newhostname}.crt"
						backup_key_path="$HOME/.ms_ssl_${newhostname}.key"
						cp "$path_ssl_crt" "$backup_crt_path"
						cp "$path_ssl_key" "$backup_key_path"
						debuglog "Backed up generated SSL certificate to ${backup_crt_path}" info
						debuglog "Backed up generated SSL key to ${backup_key_path}" info
					else
						debuglog "Failed to generate SSL certificate. Continuing without SSL update." fail
						# unset paths if generation failed
						path_ssl_key=""
						path_ssl_crt=""
					fi
				fi
			else
				debuglog "SSL pem files not provided. Env variables MS_SSL_KEY & MS_SSL_CRT not provided. SSL will not be updated!" info yellow
			fi
		fi
	fi
fi

test -f "${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml" || { debuglog "Error: ${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml not found! Not updating traefik" fail; exit 3; }

ns="$(kubectl get ns --no-headers|grep $namespace|head -1|awk '{print $1}')" || { echo "Error: Namespace not found"; exit 1; }
k="kubectl -n ${ns} "
ingresstraefik80="$($k get ingressroute| grep ingress-traefik-port80|head -1|awk '{print $1}')" || { echo "Error: Ingress for traefik port80 not found"; exit 1; }
hostname="$($k get ingressroute -o json ${ingresstraefik80}|jq .spec.routes[0].match|cut -d'`' -f2)" || { echo "Error: Hostname was not found"; exit 1; }

debuglog "Hostname: ${hostname} => ${newhostname}" info
debuglog "Waiting on Mysql pod.."
until [ "$($k get pod --no-headers|grep 'mysql-'|grep -v '\bRunning\b'|wc -l)" -eq "0" ];do sleep 5;echo -n .; done

$k exec -it deploy/mysql -- mysql -A bsi_powerdns -e "update domains set name = REPLACE(name,'$hostname','$newhostname') where id=1"
$k exec -it deploy/mysql -- mysql -A bsi_powerdns -e "update records set name = REPLACE(name,'$hostname','$newhostname'), content = REPLACE(content,'$hostname','$newhostname') where domain_id=1"

debuglog "Waiting on CouchDB pod.."
until [ "$($k get pod --no-headers|grep 'couchdb-'|grep -v '\bRunning\b'|wc -l)" -eq "0" ];do sleep 5;echo -n .; done
couchdbIP="$($k get svc|grep couchdb|awk '{print $3}')"
couchdbPort="$($k get svc|grep couchdb|awk '{print $5}'|sed 's/ /:/g'|cut -d/ -f1)"
if isIPv6 $cip;then
couchdbUrl="\[${couchdbIP}\]:${couchdbPort}"
else
couchdbUrl="${couchdbIP}:${couchdbPort}"
fi

if [ "$(curl -s -o /dev/null -w "%{http_code}" "${couchdbUrl}/_all_dbs")" != "200" ];then
	couchdb_admin_user="$($k get configmap common -o json|jq -r .data.couchdb_admin_user)"
	couchdb_admin_password="$($k get configmap common -o json|jq -r .data.couchdb_admin_password)"
	if [ -n "$couchdb_admin_user" ] && [ -n "$couchdb_admin_password" ];then
		couchdbUrl="${couchdb_admin_user}:${couchdb_admin_password}@${couchdbUrl}"
	fi
fi

debuglog "Updating CouchDB: [${couchdbUrl}]"
if [ -f "${MS_MANIFESTS_FOLDER}/config-deployment.yaml" ];then
	curl -sH "Content-Type: application/json" http://${couchdbUrl}/config-microservice/bsi > bsi_export && \
		cat bsi_export|jq --arg newhost "${newhostname}" '.DNS.dns_domain_root = $newhost | .DNS.primary_name_server = "ns1." + $newhost | .DNS.in_addr_domains_ns_record_subdomains = ["ns3." + $newhost,"ns4." + $newhost] | .BSIAdminURLRoot = "https://"+$newhost+"/cloudv1/" | .couchbaseCacheServer.bucketName = "api."+$newhost+"_cache" | .cookieDomain = "."+$newhost | .whiteLabel.production_franchise_application_hostname = "api."+$newhost | .mailClient.strSubjectPrefix = "["+$newhost+"]"' > bsi_export_modified && \
		curl -sX PUT -H "Content-Type: application/json" http://${couchdbUrl}/config-microservice/"bsi" -d @bsi_export_modified >/dev/null && rm -f bsi_export_modified bsi_export
		check_cookieDomain=$(curl -s -H "Content-Type: application/json" http://${couchdbUrl}/config-microservice/bsi 2>/dev/null | jq -r .cookieDomain)

		else
			curl -sH "Content-Type: application/json" http://${couchdbUrl}/orchestrator-microservice/bsi > bsi_export && \
				cat bsi_export|jq --arg newhost "${newhostname}" '.DNS.dns_domain_root = $newhost | .DNS.primary_name_server = "ns1." + $newhost | .DNS.in_addr_domains_ns_record_subdomains = ["ns3." + $newhost,"ns4." + $newhost] | .BSIAdminURLRoot = "https://"+$newhost+"/cloudv1/" | .couchbaseCacheServer.bucketName = "api."+$newhost+"_cache" | .cookieDomain = "."+$newhost | .whiteLabel.production_franchise_application_hostname = "api."+$newhost | .mailClient.strSubjectPrefix = "["+$newhost+"]"' > bsi_export_modified && \
				curl -sX PUT -H "Content-Type: application/json" http://${couchdbUrl}/orchestrator-microservice/"bsi" -d @bsi_export_modified >/dev/null && rm -f bsi_export_modified bsi_export
		check_cookieDomain=$(curl -s -H "Content-Type: application/json" http://${couchdbUrl}/orchestrator-microservice/bsi 2>/dev/null | jq -r .cookieDomain)

fi
		if [ -n "$check_cookieDomain" ];then
			debuglog "Cookie domain: ${check_cookieDomain}" info lightgreen
		else
			debuglog "Cookie domain not found" fail
		fi

	if [ -f "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml" ];then
		current_sc_hostname="$(grep CONTROLLER_WS_URI -A1 "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml"|grep -v CONTROLLER_WS_URI|cut -d'"' -f2|cut -d/ -f3)"
		test -z "$current_sc_hostname" && current_sc_hostname="$(grep hostAliases: -A3 "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml"|grep hostnames: -A1|grep -v hostnames:|cut -d'"' -f2)"

		if [ -n "$current_sc_hostname" ] && [ "$current_sc_hostname" != "$newhostname" ];then
			debuglog "Updating SC hostname from ${bold}${current_sc_hostname}${nc} to ${bold}${newhostname}${nc} in sc-ms-agent-deployment.yaml" info
			sed -i "s/\b${current_sc_hostname}\b/${newhostname}/g" "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml"
			#$k apply -f "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml" >/dev/null
		fi
	fi

	debuglog "Updating manifests.."
	hostnameSed="$(echo "$hostname"|sed -r 's/\./\\./g')" && \
	grep "$hostname" *.yaml -l|while read z;do sed -i "s/$hostnameSed/$newhostname/g" "$z";done
	#$k apply -f . >/dev/null

	# fix search/replace above when newhostname is an IP address (repo hostAliases points to the public IP)
	find "${MS_MANIFESTS_FOLDER}" -maxdepth 1 -type f -name "*.yaml" ! -name "repo-deployment.yaml" -exec grep -l "hostAliases:" {} \; | while read -r manifest_file; do
		grep -n "\- ip: " "$manifest_file" | cut -d: -f1 | while read -r line_num; do
			sed -i "${line_num}s/ip: .*/ip: \"${cip}\"/" "$manifest_file"
		done
	done

	#debuglog "Applying SSL.."
	test -n "$path_ssl_key" && test -f "$path_ssl_key" && b64_ssl_key="$(base64 -w0 "${path_ssl_key}")"
	test -n "$path_ssl_crt" && test -f "$path_ssl_crt" && b64_ssl_crt="$(base64 -w0 "${path_ssl_crt}")"

	test -n "$MS_SSL_KEY" && b64_ssl_key="$MS_SSL_KEY"
	test -n "$MS_SSL_CRT" && b64_ssl_crt="$MS_SSL_CRT"
	if [ -f "${MS_MANIFESTS_FOLDER}/secrets.yaml" -a -n "$b64_ssl_key" -a -n "$b64_ssl_crt" ]; then
		debuglog "Updating secrets.yaml with new SSL data.."
		sed -i "/tls\.key:/c\  tls.key: ${b64_ssl_key}" "${MS_MANIFESTS_FOLDER}/secrets.yaml"
		sed -i "/tls\.crt:/c\  tls.crt: ${b64_ssl_crt}" "${MS_MANIFESTS_FOLDER}/secrets.yaml"
		#$k apply -f "${MS_MANIFESTS_FOLDER}/secrets.yaml" >/dev/null
	else
		# Fallback to direct secret modification if secrets.yaml doesn't exist
		$k get secret ${ns}-ssl -o json|jq --arg key "$b64_ssl_key" --arg crt "$b64_ssl_crt" '.data."tls.key"=$key | .data."tls.crt"=$crt' | $k apply -f - >/dev/null
	fi

	test -z "$SKIP_APPLY_M" && find "${MS_MANIFESTS_FOLDER}" -maxdepth 1 -type f \( -name "*.yaml" ! -name traefik-helm-chart-configvalues.yaml \) -size +1|while read z;do
	echo -ne "  - applying manifest: $z ... \033[0K\r";
	$k apply -f "$z" >/dev/null;done
	echo -ne "\033[0K\r"

	debuglog "Reconfiguring traefik.."

	if [ ! -f "${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml" ];then
		echo "Error: ${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml not found! Not updating traefik"
		exit 2
	else
		sed -Ei "s/^(\s+)loadBalancerIP: \".*\"/\1loadBalancerIP: \"${cip}\"/g" ./traefik-helm-chart-configvalues.yaml
		if [ -d "${MS_MANIFESTS_FOLDER}/traefik-helmchart" ];then
			echo "[i] Using local ${MS_MANIFESTS_FOLDER}/traefik-helmchart"
			helm uninstall traefik-${ns} -n ${ns} >/dev/null 2>&1
			helm upgrade --install traefik-${ns} "${MS_MANIFESTS_FOLDER}/traefik-helmchart" --values traefik-helm-chart-configvalues.yaml -n ${ns}
		elif [ -d "${MS_MANIFESTS_FOLDER}/traefik_charts/traefik" ];then
			echo "[i] Using local ${MS_MANIFESTS_FOLDER}/traefik_charts/traefik"
			helm uninstall traefik-${ns} -n ${ns} >/dev/null 2>&1
			helm upgrade --install traefik-${ns} "${MS_MANIFESTS_FOLDER}/traefik_charts/traefik" --values traefik-helm-chart-configvalues.yaml -n ${ns} --version 20.8.0
		else
			helm repo add traefik https://helm.traefik.io/traefik >/dev/null || { echo "Error: Unable to add helm repo traefik"; }
			helm repo update >/dev/null || { echo "Error: Unable to update helm repo"; }
			helm uninstall traefik-${ns} -n ${ns} >/dev/null 2>&1
			helm upgrade --install traefik-${ns} traefik/traefik --values "${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml" -n ${ns} >/dev/null || { helm uninstall traefik-${ns} traefik/traefik -n ${ns} >/dev/null 2>&1 && helm upgrade --install traefik-${ns} traefik/traefik --values "${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml" -n ${ns} >/dev/null; }
		fi
	fi

for pod in license bsi;do
	$k get deploy --no-headers|awk '{print $1}'|grep -E "\b${pod}\b"|while read z;do debuglog "Restarting pod ${pod}.."; $k rollout restart deploy/${pod} >/dev/null 2>&1;done
done
findSslSubject="$($k get secret ${ns}-ssl -o json| jq -r '.data."tls.crt"'|base64 -d|openssl x509 -subject -noout 2>/dev/null|sed 's/^subject=//g;s/, /\n/g'|grep '^CN')"
test -n "${findSslSubject}" && debuglog "SSL from secret '${ns}-ssl' is: ${pink}${findSslSubject}${nc}"



