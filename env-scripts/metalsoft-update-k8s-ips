#!/bin/bash

nc="\e[00m"
bold="\e[1;37m"
gray="\e[2;37m"
lightred="\e[1;31m"
lightgreen="\e[1;32m"
yellow="\e[1;33m"
pink="\e[1;35m"

me="$(basename $0)"
#check if file is old
mage=$(stat -c%Y $(realpath $0))
myage=${mage:-0}
age="$(( $(date +%s) - $myage ))"
consider_old=$(( 60 * 60 * 24 * 4 ))
function nextIP ()
{
        test -n "$1" || return
        IFS='.' read -r a b c d <<< $1
        ip=$(((a<<24)+(b<<16)+(c<<8)+d))
        ((ip++))
        _nextip="$(printf "%d.%d.%d.%d\n" $(((ip>>24)&255)) $(((ip>>16)&255)) $(((ip>>8)&255)) $((ip&255)))"
        echo $_nextip
}
_localip="$(ip r get 1|head -1|awk '{print $7}')"
_nextip="$(nextIP $_localip)"
test $age -gt $consider_old && echo -e "${lightred}This file seems old, please update to latest by running: metalsoft-updates${nc}" 2>/dev/null

if [ "$EUID" -ne 0 ];then
        echo -e "[\e[1;31m✗\e[0m] Please run as root"
        exit 1
fi

if [ -z $2 ];then
        echo -e "[\e[1;31m✗\e[0m] Please provide the new 'k8s IP' and 'agents IP' [ optional: http://_proxy_ip_:3128/ ]"
        echo "[i] example: ${me} ${_localip:-10.0.0.1} ${_nextip:-10.0.0.2} http://172.18.34.89:3128/"
        exit 3;
fi

#if ! nc -zw 4 1.1.1.1 80 >/dev/null 2>&1;then
# if [ -z "$3" ];then
#         if ! timeout 3 curl -sk https://1.1.1.1 -o /dev/null 2>&1;then
#                 echo This script needs public internet access. Please run it once the condition is met.
#                 exit 2
#         fi
# fi
if [[ $1 =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$  ]]; then cip="$1"; else echo "[i] Error: Invalid k8s IP: $1"; exit 1;fi
if [[ $2 =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$  ]]; then aip="$2"; else echo "[i] Error: Invalid agents IP: $2"; exit 1;fi
echo "[i] k8s IP: $cip"
echo "[i] agents IP: $aip"

# Save last used $aip so that we reference it when doing a new mysql update search/replace
test -f ${HOME}/.ms_last_aip && last_aip="$(cat ${HOME}/.ms_last_aip|tail -1)"
test -n "$last_aip" || last_aip="10.255.146.148"

# add IP with hostname to /etc/hosts
hn="$(hostname -f 2>/dev/null)" ||  hn="$(cat /etc/hostname)"
test -n "$hn" && sed -i "/\b${hn}\b/d" /etc/hosts && echo "$cip $hn cluster.demo.metalsoft.io controller-demo.metalsoft.io" >> /etc/hosts

if [ ! -z $3 ];then
        proxy_url="$3"
        echo "[i] setting up proxy via $proxy_url"
        lip="$(echo $cip|cut -d. -f1-3)"
        local_ips="$(ip -o -4 a|grep -v "$lip"|awk '{print $4}'|xargs |sed 's/ /,/g')"
        no_proxy="localhost,::1,.demo.metalsoft.io,.istio-system.svc,.svc.cluster.local,controller,$local_ips"
        if [ -f /var/snap/microk8s/current/args/kube-apiserver ];then
                kubeapiiprange="$(grep -oP '.*service-cluster-ip-range=\K.*' /var/snap/microk8s/current/args/kube-apiserver|head -1)"
                if [ -n "$kubeapiiprange" ];then
                        no_proxy="$no_proxy,$kubeapiiprange"
                fi
        fi

        if [ -f /var/snap/microk8s/current/args/kube-proxy ];then
                kubeproxyiprange="$(grep -oP '.*cluster-cidr=\K.*' /var/snap/microk8s/current/args/kube-proxy|head -1)"
                if [ -n "$kubeproxyiprange" ];then
                        no_proxy="$no_proxy,$kubeproxyiprange"
                fi
        fi
        echo no_proxy line = $no_proxy
        env_file="/etc/environment"
        if grep '^HTTP_PROXY=' $env_file > /dev/null;then

                sed -i "/^http_proxy=/chttp_proxy=\"$proxy_url\"" $env_file
                sed -i "/^https_proxy=/chttps_proxy=\"$proxy_url\"" $env_file
                sed -i "/^no_proxy=/cno_proxy=\"$no_proxy\"" $env_file

                sed -i "/^HTTP_PROXY=/cHTTP_PROXY=\"$proxy_url\"" $env_file
                sed -i "/^HTTPS_PROXY=/cHTTPS_PROXY=\"$proxy_url\"" $env_file
                sed -i "/^NO_PROXY=/cNO_PROXY=\"$no_proxy\"" $env_file
        else

                echo "http_proxy=\"$proxy_url\"" >> $env_file
                echo "https_proxy=\"$proxy_url\"" >> $env_file
                echo "no_proxy=\"$no_proxy\"" >> $env_file

                echo "HTTP_PROXY=\"$proxy_url\"" >> $env_file
                echo "HTTPS_PROXY=\"$proxy_url\"" >> $env_file
                echo "NO_PROXY=\"$no_proxy\"" >> $env_file

        fi

# Enable these without logging out/in
export http_proxy="$proxy_url"
export https_proxy="$proxy_url"
export no_proxy="$no_proxy"

export HTTP_PROXY="$proxy_url"
export HTTPS_PROXY="$proxy_url"
export NO_PROXY="$no_proxy"

contd_file="/var/snap/microk8s/current/args/containerd-env"
if [ -f $contd_file ];then

        if grep '^HTTP_PROXY=' $contd_file > /dev/null;then

                sed -i "/^http_proxy=/chttp_proxy=\"$proxy_url\"" $contd_file
                sed -i "/^https_proxy=/chttps_proxy=\"$proxy_url\"" $contd_file
                sed -i "/^no_proxy=/cno_proxy=\"$no_proxy\"" $contd_file

                sed -i "/^HTTP_PROXY=/cHTTP_PROXY=\"$proxy_url\"" $contd_file
                sed -i "/^HTTPS_PROXY=/cHTTPS_PROXY=\"$proxy_url\"" $contd_file
                sed -i "/^NO_PROXY=/cNO_PROXY=\"$no_proxy\"" $contd_file
        else

                echo "http_proxy=\"$proxy_url\"" >> $contd_file
                echo "https_proxy=\"$proxy_url\"" >> $contd_file
                echo "no_proxy=\"$no_proxy\"" >> $contd_file

                echo "HTTP_PROXY=\"$proxy_url\"" >> $contd_file
                echo "HTTPS_PROXY=\"$proxy_url\"" >> $contd_file
                echo "NO_PROXY=\"$no_proxy\"" >> $contd_file

        fi
fi

if [ -f /var/snap/microk8s/current/certs/csr.conf.template ];then
        if grep -q '^IP\.103 = ' /var/snap/microk8s/current/certs/csr.conf.template;then
                sed -i "/^IP.103 =.*/c IP.103 = ${cip}" /var/snap/microk8s/current/certs/csr.conf.template
        else
                sed -i "/^#MOREIPS/i IP.103 = ${cip}" /var/snap/microk8s/current/certs/csr.conf.template
        fi
fi

echo "[i] Waiting for k8s service..."
microk8s status --wait-ready -t 600 >/dev/null 2>&1
sleep 10
echo "[i] restarting microk8s to apply proxy settings..."
microk8s stop
sleep 5
microk8s start
microk8s status --wait-ready -t 600 >/dev/null 2>&1
fi

if [ -d "/root/manifests" ];then
        cd /root/manifests/
        echo "[i] Updating Traefik"
        sed -Ei "s/^(\s+)loadBalancerIP: \".*\"/\1loadBalancerIP: \"${cip}\"/g" ./traefik-helm-chart-configvalues.yaml
        if [ -d "/root/manifests/traefik_charts/traefik" ];then
                microk8s helm3 upgrade traefik-demo-metalsoft /root/manifests/traefik_charts/traefik --values traefik-helm-chart-configvalues.yaml -n demo-metalsoft
        else
                echo "!!!! Local Traefik Charts missing, falling back to try to pull from official repository"
                microk8s helm3 repo add traefik https://helm.traefik.io/traefik
                microk8s helm3 repo update
                microk8s helm3 upgrade traefik-demo-metalsoft traefik/traefik --values traefik-helm-chart-configvalues.yaml -n demo-metalsoft
        fi
fi

cat > /tmp/IPAddressPool.yaml << EOFF
---
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: default-addresspool
  namespace: metallb-system
spec:
  addresses:
  - ${cip}/32
EOFF

#microk8s kubectl -n metallb-system get IPAddressPool -o yaml > /tmp/IPAddressPool.yaml
#sed -i "s/\(\s\+-\) 10\.0\..*\/32/\1 ${cip}\/32/g" /tmp/IPAddressPool.yaml
echo "[i] Waiting for Metallb pods to start, then the new configuration will be applied"
until [ "$(microk8s kubectl  -n metallb-system get pod --no-headers|grep -v '\bRunning\b'|wc -l)" -eq "0" ];do microk8s kubectl get pod -n metallb-system --no-headers|grep Terminating|awk '{print $1}'|while read z;do microk8s kubectl delete pod -n metallb-system $z;done; sleep 5;echo -n .; done
microk8s kubectl apply -f /tmp/IPAddressPool.yaml -n metallb-system --force=true
ec=$?
microk8s kubectl get pod -n metallb-system --no-headers|awk '{print $1}'|xargs|while read z;do microk8s kubectl delete pod -n metallb-system $z;done

microk8s.kubectl -n demo-metalsoft exec -it deploy/mysql -- mysql -A bsi_powerdns -e "UPDATE records SET content = '$cip' where domain_id=1 and type='A' and name='ip.demo.metalsoft.io'"
if [ "$last_aip" != "$aip" ];then
        microk8s.kubectl -n demo-metalsoft exec -it deploy/mysql -- mysql -A bsi_api_demo_metalsoft_io -e "update datacenters set datacenter_config_json = REPLACE(datacenter_config_json,'${last_aip}','${aip}') where datacenter_name='dc-demo'" && echo -n "$aip" > ${HOME}/.ms_last_aip && microk8s.kubectl -n demo-metalsoft get pod --no-headers|grep websocket-tunnel-server-|col1|xargs microk8s.kubectl -n demo-metalsoft delete pod
fi

test ${ec} -eq 0 && echo -e "\n[\e[1;32m✓\e[0m] ${lightgreen} Try to navigate to: https://demo.metalsoft.io/${nc} \nIf you get connection reset errors, you can rerun the script with same parameters:\n${me} $@\n" || echo -e "\n[\e[1;31m✗\e[0m][${ec}]${lightred}Some errors were seen. Please rerun this script again, once all pods have started:\n${me} $@ ${nc}\n"

echo
echo "[i] Done"
