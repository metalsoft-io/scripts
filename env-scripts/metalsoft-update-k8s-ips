#!/bin/bash
# vi: et st=2 sts=2 ts=2 sw=2 cindent bg=dark ft=sh

nc="\e[00m"
bold="\e[1;37m"
gray="\e[2;37m"
lightred="\e[1;31m"
lightgreen="\e[1;32m"
yellow="\e[1;33m"
pink="\e[1;35m"

me="$(basename $0)"
#check if file is old
mage=$(stat -c%Y $(realpath $0))
myage=${mage:-0}
age="$(( $(date +%s) - $myage ))"
consider_old=$(( 60 * 60 * 24 * 4 ))
MS_MANIFESTS_FOLDER=${MS_MANIFESTS_FOLDER:-/root/manifests}
ns=${ns:-demo-metalsoft}

function isIPv6() {
    # More comprehensive IPv6 validation
    [[ $1 =~ ^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$ ]] && return 0
    [[ $1 =~ ^::1$ ]] && return 0
    [[ $1 =~ ^::$ ]] && return 0
    [[ $1 =~ ^::([0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{0,4}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,7}:$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}$ ]] && return 0
    [[ $1 =~ ^([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}$ ]] && return 0
    [[ $1 =~ ^[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})$ ]] && return 0
    return 1
}

function isIPv4() {
    [[ $1 =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]] && return 0
    return 1
}

function nextIPv4() {
    test -n "$1" || return
    IFS='.' read -r a b c d <<< $1
    ip=$(((a<<24)+(b<<16)+(c<<8)+d))
    ((ip++))
    _nextip="$(printf "%d.%d.%d.%d\n" $(((ip>>24)&255)) $(((ip>>16)&255)) $(((ip>>8)&255)) $((ip&255)))"
    echo $_nextip
}

function nextIPv6() {
    test -n "$1" || return
    local ipv6="$1"

    # Try using python3 first
    if command -v python3 >/dev/null 2>&1; then
        local expanded=$(python3 -c "
        import ipaddress
        try:
        ip = ipaddress.IPv6Address('$ipv6')
        next_ip = ip + 1
        print(str(next_ip))
        except:
        print('$ipv6')
        " 2>/dev/null)
        echo "$expanded"
    else
        # Fallback: simple increment of last digit (basic approach)
        local last_char="${ipv6: -1}"
        local prefix="${ipv6%?}"
        case "$last_char" in
            [0-8]) echo "${prefix}$((last_char + 1))" ;;
            9) echo "${prefix}a" ;;
            [a-e]) printf "${prefix}%x" $((0x$last_char + 1)) ;;
            f) echo "${prefix}10" ;;
            *) echo "$ipv6" ;;
        esac
    fi
}

function nextIP() {
    test -n "$1" || return
    if isIPv6 "$1"; then
        nextIPv6 "$1"
    elif isIPv4 "$1"; then
        nextIPv4 "$1"
    else
        echo "$1"
    fi
}

function getIPv6PodCIDR() {
    # Get pod CIDRs from all nodes and find IPv6 ones
    local pod_cidrs="$(kubectl get nodes -o jsonpath='{.items[*].spec.podCIDRs[*]}' 2>/dev/null)"

    if [ -n "$pod_cidrs" ]; then
        # Filter for valid IPv6 CIDRs (contains colons and has /prefix)
        echo "$pod_cidrs" | tr ' ' '\n' | grep -E '^[0-9a-fA-F:]+/[0-9]+$' | head -1
    fi
}

function setupIPv6Masquerade() {
    local pod_cidr="$(getIPv6PodCIDR)"

    if [ -z "$pod_cidr" ]; then
        echo "[-] Could not determine IPv6 pod CIDR, pods might not reach public network"
        echo "[i] Available pod CIDRs: $(kubectl get nodes -o jsonpath='{.items[*].spec.podCIDRs[*]}' 2>/dev/null)"
        return 1
    fi

    echo "[i] Found IPv6 pod CIDR: $pod_cidr"

    # Check if MASQUERADE rule already exists
    if ip6tables -t nat -nL POSTROUTING 2>/dev/null | grep -P "^MASQUERADE\s+all" | grep -q "$pod_cidr"; then
        echo "[i] MASQUERADE rule already exists for $pod_cidr"
        return 0
    fi

    # Add MASQUERADE rule
    echo "[i] Adding POSTROUTING MASQUERADE rule for: $pod_cidr"
    if ip6tables -t nat -A POSTROUTING -s "$pod_cidr" -j MASQUERADE 2>/dev/null; then
        echo "[i] MASQUERADE rule successfully added"
        return 0
    else
        echo "[!] Error: Failed to add MASQUERADE rule"
        return 1
    fi
}

# Get local IP (try IPv4 first, then IPv6)
_localip="$(ip r get 1 2>/dev/null | head -1 | awk '{print $7}')"
if [ "$(echo "$_localip" | wc -m)" -le 3 ]; then
    # Try IPv6 if IPv4 fails
    _localip="$(ip -6 r get 2001:db8::1 2>/dev/null | head -1 | awk '{print $11}')"
    if [ "$(echo "$_localip" | wc -m)" -le 3 ]; then
        _localip="1.2.3.4"  # fallback
    fi
fi

_nextip="$(nextIP $_localip)"
test $age -gt $consider_old && echo -e "${lightred}This file seems old, please update to latest by running: metalsoft-updates${nc}" 2>/dev/null

if [ "$EUID" -ne 0 ];then
    echo -e "[\e[1;31m✗\e[0m] Please run as root"
    exit 1
fi

if [ -z $2 ];then
    echo -e "[\e[1;31m✗\e[0m] Please provide the new 'GlobalController/k8s IP' and 'SiteController/agent IP' [ optional: http://_proxy_ip_:3128/ ]"
    echo "[i] example: ${me} ${_localip:-10.0.0.1} ${_nextip:-10.0.0.2} http://$(nextIP $_nextip):3128/"
    #echo "[i] IPv6 example: ${me} 2001:db8::1 2001:db8::2 http://[2001:db8::proxy]:3128/"
    echo -e "${bold}MS_MANIFESTS_FOLDER${nc} env variable can optionally be used to specify the manifests folder. Default is: /root/manifests"
    exit 3;
fi

# Validate IP addresses (IPv4 or IPv6)
if isIPv4 "$1" || isIPv6 "$1"; then
    cip="$1"
else
    echo "[i] Error: Invalid k8s IP (must be IPv4 or IPv6): $1"
    exit 1
fi

if isIPv4 "$2" || isIPv6 "$2"; then
    aip="$2"
else
    echo "[i] Error: Invalid agents IP (must be IPv4 or IPv6): $2"
    exit 1
fi

echo "[i] GC IP: $cip"
echo "[i] SC IP: $aip"

# Save last used $aip so that we reference it when doing a new mysql update search/replace
test -f /etc/metalsoft && source /etc/metalsoft || touch /etc/metalsoft

if ! grep -q "^MS_GC_IP=" /etc/metalsoft; then
    echo "MS_GC_IP=$cip" >> /etc/metalsoft
else
    sed -i "s/^MS_GC_IP=.*/MS_GC_IP=$cip/" /etc/metalsoft
fi

if ! grep -q "^MS_SC_IP=" /etc/metalsoft; then
    echo "MS_SC_IP=$aip" >> /etc/metalsoft
else
    sed -i "s/^MS_SC_IP=.*/MS_SC_IP=$aip/" /etc/metalsoft
fi

# add IP with hostname to /etc/hosts
hn="$(hostname -f 2>/dev/null)" ||  hn="$(cat /etc/hostname)"
test -f /etc/.ms_hostname && main_domain="$(cat /etc/.ms_hostname 2>/dev/null)"
test -z "$main_domain" && main_domain="$(grep cookie_domain ${MS_MANIFESTS_FOLDER}/configmaps.yaml 2>/dev/null|head -1|cut -d '"' -f2|sed 's/^\.//g')"
test -z "$main_domain" && main_domain="$(grep 'match: Host' ${MS_MANIFESTS_FOLDER}/ingressroutes.yaml 2>/dev/null|grep -Ev 'repo\.|registry\.'|cut -d '`' -f2|head -1)"
test -n "$hn" && sed -i "/\b${hn}\b/d" /etc/hosts && echo "$cip $hn cluster.demo.metalsoft.io controller-demo.metalsoft.io $main_domain" >> /etc/hosts
test -n "$main_domain" && echo "$main_domain" > /etc/.ms_hostname 2>/dev/null
grep -q " \b$main_domain\b" /etc/hosts || echo "$cip $main_domain" >> /etc/hosts 2>/dev/null

if ! grep -q "^MS_HOSTNAME=" /etc/metalsoft; then
    echo "MS_HOSTNAME=$main_domain" >> /etc/metalsoft
else
    sed -i "s/^MS_HOSTNAME=.*/MS_HOSTNAME=$main_domain/" /etc/metalsoft
fi

cd ${MS_MANIFESTS_FOLDER} || { echo "[i] Error: Unable to cd to manifests folder: ${MS_MANIFESTS_FOLDER}"; exit 1; }

# IPv6-specific k3s configuration
if isIPv6 "$cip"; then
    echo "[i] Configuring k3s for IPv6 with bind-address and advertise-address: $cip"

    if ! grep -q '^net.ipv6.conf.all.forwarding=1' /etc/sysctl.conf; then
        echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.conf
        sysctl -p
    fi

    # Checking if we have all the needed components to reinstall k3s
    test -f /root/k3s/k3s-install.sh && \
        test -f /root/k3s/k3s && \
        test -f /root/k3s/k3s-airgap-images-amd64.tar.zst || { echo "[i] Error: Missing k3s reinstall components. Stopping here."; exit 1; }

    # Stop k3s service
    systemctl stop k3s 2>/dev/null || true

    # Backup containerd directory with images
    mv /var/lib/rancher/k3s/agent/containerd /root/containerd-backup 2>/dev/null || { echo "[i] Error: Could not backup local images"; exit 1; }

    test -f /var/lib/rancher/k3s/server/token && old_token="$(cat /var/lib/rancher/k3s/server/token)"
    rm -rf /var/lib/rancher/k3s/server/{db,token,node-token,tls,manifests-staging} 2>/dev/null || true
    rm -f /etc/rancher/k3s/k3s.yaml

    test -x /usr/local/bin/k3s-uninstall.sh && \
        echo "[i] Uninstalling k3s..." && \
        /usr/local/bin/k3s-uninstall.sh >/dev/null 2>&1 || true
            rm -f /usr/local/bin/k3s* 2>/dev/null || true

    # Restore containerd directory with images
    mkdir -p /var/lib/rancher/k3s/agent && \
        mv /root/containerd-backup /var/lib/rancher/k3s/agent/containerd 2>/dev/null || { echo "[i] Error: Could not restore local images"; }

    echo "[i] Installing k3s..."
    #curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.32.5+k3s1" INSTALL_K3S_EXEC="--disable=servicelb --disable-cloud-controller --write-kubeconfig-mode=600 --disable=traefik" sh -
    test -f /root/k3s/k3s-install.sh && \
        test -f /root/k3s/k3s && \
        cp /root/k3s/k3s /usr/local/bin/k3s && \
        chmod +x /usr/local/bin/k3s && \
        test -f /root/k3s/k3s-airgap-images-amd64.tar.zst && \
        INSTALL_K3S_SKIP_DOWNLOAD=true INSTALL_K3S_EXEC="--disable=servicelb --disable-cloud-controller --write-kubeconfig-mode=600 --disable=traefik" /root/k3s/k3s-install.sh
            echo "[i] Waiting for k3s to be ready..."
            timeout=60
            while [ $timeout -gt 0 ]; do
                if systemctl is-active k3s >/dev/null 2>&1 && [ -f /etc/rancher/k3s/k3s.yaml ] && kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get nodes --no-headers >/dev/null 2>&1; then
                    echo "[i] k3s is ready"
                    break
                fi
                sleep 2
                ((timeout-=2))
            done

            if [ $timeout -le 0 ]; then
                echo "[!] Warning: k3s did not become ready within 60 seconds, continuing anyway..."
            fi


            test -f namespace.yaml && \
                echo "[i] Applying namespace.yaml..." && \
                kubectl apply -f namespace.yaml >/dev/null || { echo "[i] Error: Unable to apply namespace.yaml"; exit 1; }

            test -f mysql-deployment.yaml && \
                echo "[i] Applying mysql-deployment.yaml..." && \
                kubectl -n ${ns} apply -f mysql-deployment.yaml >/dev/null || { echo "[i] Error: Unable to apply mysql-deployment.yaml"; exit 1; }

            test -f couchdb-deployment.yaml && \
                echo "[i] Applying couchdb-deployment.yaml..." && \
                kubectl -n ${ns} apply -f couchdb-deployment.yaml >/dev/null || { echo "[i] Error: Unable to apply couchdb-deployment.yaml"; exit 1; }

            test -f /root/manifests/scripts/metallb-native.yaml && \
                echo "[i] Applying metallb-native.yaml..." && \
                kubectl apply -f /root/manifests/scripts/metallb-native.yaml >/dev/null || { echo "[i] Error: Unable to apply metallb-native.yaml"; exit 1; }

    #test -x scripts/traefik_helm_install.sh && \
    #echo "[i] Installing traefik..." && \
    #scripts/traefik_helm_install.sh || { echo "[i] Error: Unable to install traefik"; exit 1; }

    echo "[i] Applying remaining manifests..."
    find . -mindepth 1 -maxdepth 1 -name "*.yaml" ! -name "traefik-helm-chart-configvalues.yaml" ! -name "ingressroutes.yaml"|while read z;do
    kubectl -n ${ns} apply -f "$z" >/dev/null
done

    # Setup IPv6 MASQUERADE for pods to reach public network
    setupIPv6Masquerade

    echo "[i] k3s IPv6 configuration procedure completed"
fi

if [ ! -z $3 ];then
    proxy_url="$3"
    echo "[i] setting up proxy via $proxy_url"

        # Handle both IPv4 and IPv6 for local network detection
        if isIPv6 "$cip"; then
            # For IPv6, get the network prefix (first 64 bits typically)
            lip="$(echo $cip | cut -d: -f1-4)"
            local_ips="$(ip -o -6 a | grep -v "$lip" | awk '{print $4}' | xargs | sed 's/ /,/g')"
        else
            # IPv4 logic (existing)
            lip="$(echo $cip|cut -d. -f1-3)"
            local_ips="$(ip -o -4 a|grep -v "$lip"|awk '{print $4}'|xargs |sed 's/ /,/g')"
        fi

        no_proxy="localhost,::1,.demo.metalsoft.io,.istio-system.svc,.svc.cluster.local,controller,$local_ips"

        echo no_proxy line = $no_proxy
        env_file="/etc/environment"
        if grep '^HTTP_PROXY=' $env_file > /dev/null;then

            sed -i "/^http_proxy=/chttp_proxy=\"$proxy_url\"" $env_file
            sed -i "/^https_proxy=/chttps_proxy=\"$proxy_url\"" $env_file
            sed -i "/^no_proxy=/cno_proxy=\"$no_proxy\"" $env_file

            sed -i "/^HTTP_PROXY=/cHTTP_PROXY=\"$proxy_url\"" $env_file
            sed -i "/^HTTPS_PROXY=/cHTTPS_PROXY=\"$proxy_url\"" $env_file
            sed -i "/^NO_PROXY=/cNO_PROXY=\"$no_proxy\"" $env_file
        else

            echo "http_proxy=\"$proxy_url\"" >> $env_file
            echo "https_proxy=\"$proxy_url\"" >> $env_file
            echo "no_proxy=\"$no_proxy\"" >> $env_file

            echo "HTTP_PROXY=\"$proxy_url\"" >> $env_file
            echo "HTTPS_PROXY=\"$proxy_url\"" >> $env_file
            echo "NO_PROXY=\"$no_proxy\"" >> $env_file

        fi

# Enable these without logging out/in
export http_proxy="$proxy_url"
export https_proxy="$proxy_url"
export no_proxy="$no_proxy"

export HTTP_PROXY="$proxy_url"
export HTTPS_PROXY="$proxy_url"
export NO_PROXY="$no_proxy"

fi # end if $3

if [ -d "${MS_MANIFESTS_FOLDER}" ];then
    cd "${MS_MANIFESTS_FOLDER}/"
    echo "[i] Updating Traefik"

    if [ ! -f "${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml" ];then
        echo "Error: ${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml not found! Not updating traefik"
        exit 2
    else
        # Use different delimiter for sed to handle IPv6 colons
        sed -Ei "s|^(\s+)loadBalancerIP: \".*\"|\1loadBalancerIP: \"${cip}\"|g" ./traefik-helm-chart-configvalues.yaml
        if [ -d "${MS_MANIFESTS_FOLDER}/traefik-helmchart" ];then
            echo "[i] Using local ${MS_MANIFESTS_FOLDER}/traefik-helmchart"
            helm uninstall traefik-${ns} -n ${ns} >/dev/null 2>&1
            helm upgrade --install traefik-${ns} "${MS_MANIFESTS_FOLDER}/traefik-helmchart" --values traefik-helm-chart-configvalues.yaml -n ${ns}
        elif [ -d "${MS_MANIFESTS_FOLDER}/traefik_charts/traefik" ];then
            echo "[i] Using local ${MS_MANIFESTS_FOLDER}/traefik_charts/traefik"
            helm uninstall traefik-${ns} -n ${ns} >/dev/null 2>&1
            helm upgrade --install traefik-${ns} "${MS_MANIFESTS_FOLDER}/traefik_charts/traefik" --values traefik-helm-chart-configvalues.yaml -n ${ns} --version 20.8.0
        else
            helm repo add traefik https://helm.traefik.io/traefik >/dev/null || { echo "Error: Unable to add helm repo traefik"; }
            helm repo update >/dev/null || { echo "Error: Unable to update helm repo"; }
            helm uninstall traefik-${ns} -n ${ns} >/dev/null 2>&1
            helm upgrade --install traefik-${ns} traefik/traefik --values "${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml" -n ${ns} >/dev/null || { helm uninstall traefik-${ns} traefik/traefik -n ${ns} >/dev/null 2>&1 && helm upgrade --install traefik-${ns} traefik/traefik --values "${MS_MANIFESTS_FOLDER}/traefik-helm-chart-configvalues.yaml" -n ${ns} >/dev/null; }
        fi
    fi
fi
echo "[i] Applying ingressroutes.yaml"
test -f ingressroutes.yaml && kubectl -n ${ns} apply -f ingressroutes.yaml >/dev/null || { echo "[i] Error: kubectl could not apply: ingressroutes.yaml"; }

cat > /tmp/IPAddressPool.yaml << EOFF
---
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: pool
  namespace: metallb-system
spec:
  addresses:
  - ${cip}-${cip}
EOFF

kubectl get po -A|grep -E '^kube-system|^metallb-system'|grep -iE 'unknown|invalid|CrashLoopBackOff'|awk '{print $1,$2}'|while read ans apod;do kubectl -n $ans delete pod $apod;done

#sed -i "s/\(\s\+-\) 10\.0\..*\/32/\1 ${cip}\/32/g" /tmp/IPAddressPool.yaml
echo "[i] Waiting for Metallb pods to start, then the new configuration will be applied"
i=0
until [ "$(kubectl -n metallb-system get pods --no-headers 2>/dev/null | wc -l)" -gt 0 ]; do
    sleep 3
    until ! kubectl -n metallb-system get pods --no-headers 2>/dev/null | awk '{print $3}' | grep -qv '^Running$'; do
        sleep 3
        ((i++))
        if (( i % 7 == 0 )); then
            kubectl -n metallb-system get pods --no-headers
        fi
        if (( i % 20 == 0 )); then
            kubectl -n metallb-system get po --no-headers 2>/dev/null|awk '{print $1}'|while read z;do kubectl -n metallb-system delete po $z &>/dev/null;done
        fi
    done
done
kubectl -n metallb-system apply -f /tmp/IPAddressPool.yaml >/dev/null || { echo -e "${yellow}Error: Unable to apply IPAddressPool, trying workaround...${nc}"; kubectl -n metallb-system get validatingwebhookconfiguration --no-headers|awk '{print $1}'|while read v hook age;do kubectl -n metallb-system delete validatingwebhookconfiguration $v;done && kubectl -n metallb-system apply -f /tmp/IPAddressPool.yaml >/dev/null; }
ec=$?
echo "[i] Waiting for MySQL to be ready"
i=0
until kubectl -n ${ns} exec -it deploy/mysql -- mysql -A metalsoft -e "select 1" >/dev/null 2>&1; do
    sleep 3
    ((i++))
    if (( i % 7 == 0 )); then
        kubectl -n metallb-system get pods --no-headers | grep -i mysql
    fi
done

if isIPv6 "$cip"; then
    # Update AAAA record for IPv6
    kubectl -n ${ns} exec -it deploy/mysql -- mysql -A bsi_powerdns -e "UPDATE records SET content = '$cip' where domain_id=1 and type='AAAA' and name='ip.demo.metalsoft.io'"
else
    # Update A record for IPv4
    kubectl -n ${ns} exec -it deploy/mysql -- mysql -A bsi_powerdns -e "UPDATE records SET content = '$cip' where domain_id=1 and type='A' and name='ip.demo.metalsoft.io'"
fi
found_dcdemo_aip="$(kubectl -n ${ns} exec -it deploy/mysql -- mysql -A metalsoft -BNe "select datacenter_config_json from datacenters where datacenter_id=1 and datacenter_name='dc-demo' and datacenter_status='active' and datacenter_hidden=0 and datacenter_is_maintenance=0"|jq -cr .controllerPolicy.subnetAllocation[0]|tr -d '\n\r'|cut -d/ -f1)"
if [ "$found_dcdemo_aip" != "$aip" ];then
    echo "[i] Updating dc-demo subnet allocation to $aip"
    # Use MySQL REPLACE function which handles special characters automatically
    kubectl -n ${ns} exec -it deploy/mysql -- mysql -A metalsoft -e "update datacenters set datacenter_config_json = REPLACE(datacenter_config_json,'${found_dcdemo_aip}','${aip}') where datacenter_name='dc-demo'"
fi

if [ -f "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml" ];then
    # get the currently configured SC IP:
    current_sc_ip="$(grep hostAliases: -A1 "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml" 2>/dev/null|grep ip:|cut -d'"' -f2)"
    test -z "$current_sc_ip" && current_sc_ip="$(grep SITE_CONTROLLER_IP -A1 "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml" 2>/dev/null|grep value:|cut -d'"' -f2)"

    if [ -n "$current_sc_ip" ];then
        echo -e "[i] Updating SC IP from ${bold}${current_sc_ip}${nc} to ${bold}${aip}${nc} in sc-ms-agent-deployment.yaml"
        # Use different delimiter for sed to handle IPv6 addresses
        sed -i "s|\b${current_sc_ip}\b|${aip}|g" "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml"
        kubectl -n ${ns} apply -f "${MS_MANIFESTS_FOLDER}/sc-ms-agent-deployment.yaml" >/dev/null

        if [ -f "${MS_MANIFESTS_FOLDER}/sc-ansible-runner-deployment.yaml" ];then
            echo -e "[i] Updating SC IP from ${bold}${current_sc_ip}${nc} to ${bold}${aip}${nc} in sc-ansible-runner-deployment.yaml"
            sed -i "s|\b${current_sc_ip}\b|${aip}|g" "${MS_MANIFESTS_FOLDER}/sc-ansible-runner-deployment.yaml"
            kubectl -n ${ns} apply -f "${MS_MANIFESTS_FOLDER}/sc-ansible-runner-deployment.yaml" >/dev/null
        fi
    fi
fi

test ${ec} -eq 0 && echo -e "\n[\e[1;32m✓\e[0m] ${lightgreen}Navigate to: https://${main_domain}/${nc} \nIf you get connection reset errors, you can rerun the script with same parameters:\n${me} $@\n" || echo -e "\n[\e[1;31m✗\e[0m][${ec}]${lightred}Some errors were seen. Please rerun this script again, once all pods have started:\n${me} $@ ${nc}\n"

echo
echo "[i] Helm releases:"
helm list -n ${ns}
echo
echo "[i] Services:"
kubectl -n ${ns} get svc|grep traefik
echo
echo "[i] Done"
