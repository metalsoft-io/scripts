#!/bin/bash
# vi: et st=2 sts=2 ts=2 sw=2 cindent bg=dark ft=bash

# How to install:
# wget -q https://raw.githubusercontent.com/metalsoft-io/scripts/main/env-scripts/diagnostics-collector -O /usr/local/bin/diagnostics-collector && chmod +x /usr/local/bin/diagnostics-collector

nc=$(tput sgr0)
bold=$(tput bold)
orange=$(tput setaf 3)
lightred=$(tput setaf 9)
lightgreen=$(tput setaf 10)
gray=$(tput setaf 8)

thedate=$(date +"%F-%H%M%S")
backupFolder="/var/backups/metalsoft/${thedate}_${envname}_${gather}"

function usage {
        echo -e "[i] $(basename $0) gathers diagnostics for MetalSoft. Optional parameters:\n  ${bold}-n${nc} ${orange}(Required)${nc} ${gray}specify a namespace [ -n demo-metalsoft ]${nc}\n  ${bold}-c${nc} ${gray}[ Use for Controller ]${nc}\n  ${bold}-a${nc} ${gray}[ Use for Agent ]${nc}\n  ${bold}-k${nc} ${gray}specify an alternative kubectl [ -k microk8s.kubectl ]${nc}\n  ${bold}-b${nc} ${gray}specify a backup folder [ -b /var/backups/metalsoft ]${nc}\n  ${bold}-p${nc} ${gray}[ Push the diagnostics to MetalSoft via HTTPS ]${nc}\n  ${bold}-e${nc} ${gray}[ Extended collection of k8s resources and DBs ]${nc}"
        exit 0
}

# Auto-determine if we are on agent or controller:
test -d /opt/metalsoft/agents && type docker &>/dev/null && gather='agent'
type kubectl &>/dev/null && gather='controller' && k='kubectl '
type microk8s &>/dev/null && gather='controller' && k='microk8s.kubectl '
pushfile=
extended=

while getopts ":k:n:b:P:capezs" flag
do
        case "${flag}" in
                p) pushfile="1" ;;
                P) pushfileFromArg="${OPTARG}" ;;
                c) gather='controller' ;;
                a) gather='agent' ;;
                k) k="${OPTARG}" ;;
                n) envname="${OPTARG}" ;;
                b) backupFolder="${OPTARG}" ;;
                e) extended=1 ;;
                s) sqlUpgradeLogs=1 ;;
                z) doNotAutoSend=1 ;;
                :) echo "Error: -${OPTARG} requires an argument." && exit 1;;
                h | *) usage;;
        esac
done
shift "$((OPTIND - 1))"

if [ -n "$pushfileFromArg" ]; then
        test -f "$pushfileFromArg" || { echo -e "[\e[1;31m✗\e[0m] File '$pushfileFromArg' does not exist"; exit 1; }
        echo -n "[i] Trying to auto-push the diagnostics file '$pushfileFromArg' to MetalSoft [HTTPS] ... " && curl -sk "https://diagnostics-report.metalsoft.io/?a=121&f=992&pushfromarg=1&ns=${envname}" -F diag=@"${pushfileFromArg}" 2>/dev/null && echo -e " Done\n" || { echo -e "\n[\e[1;31m✗\e[0m] Tried pushing the diagnostics file to MetalSoft, but encountered errors."; exit 1; }
        exit 0;
fi

test -n "$gather" && echo "[i] Collecting diagnostics for: ${gather^}" || { echo -e "[\e[1;31m✗\e[0m] please specify parameter -c [for Global Controller] or -a [for Site Controller or Agent]"; exit 1; }
test -z "$envname" && echo "${lightred}[e] Please use -n to specify namespace${nc}" && exit 10;
mkdir -p "$backupFolder" || { echo -e "[\e[1;31m✗\e[0m] ${backupFolder} could not be created. Please check path, permissions and available disk space"; exit 2; }

originalBackupFolder="$backupFolder"

function finish {
        echo "[i] cleaning up.."
        rm -rf "${backupFolder}"
        exit 3
}

trap finish INT EXIT

function get_disks() {
        echo -e "\n:: df -h\n" >> "${backupFolder}/disks_stats.txt"
        df -h >> "${backupFolder}/disks_stats.txt" 2>&1 || true
        echo -e "\n:: lsblk\n" >> "${backupFolder}/disks_stats.txt"
        lsblk >> "${backupFolder}/disks_stats.txt" 2>&1 || true
        echo -e "\n:: fdisk -l\n" >> "${backupFolder}/disks_stats.txt"
        fdisk -l >> "${backupFolder}/disks_stats.txt" 2>&1 || true
        cat /etc/hosts > "${backupFolder}/etc_hosts" || true
        cat /etc/resolv.conf > "${backupFolder}/etc_resolv_conf" || true
        echo -e "\n:: ip a\n" > "${backupFolder}/ip_stats"
        ip a >> "${backupFolder}/ip_stats" || true
        echo -e "\n:: ip r\n" >> "${backupFolder}/ip_stats"
        ip r >> "${backupFolder}/ip_stats" || true
        echo -e "\n:: ip link\n" >> "${backupFolder}/ip_stats"
        ip link >> "${backupFolder}/ip_stats" || true
}

function get_k8s() {
        echo -e "\n:: kubectl get node -o wide\n" >> "${backupFolder}/k8s_stats.txt"
        $k get node -o wide >> "${backupFolder}/k8s_stats.txt" 2>&1 || true
        echo -e "\n:: kubectl get pod -A\n" >> "${backupFolder}/k8s_stats.txt"
        $k get pod -A -o wide >> "${backupFolder}/k8s_stats.txt" 2>&1 || true
        echo -e "\n:: kubectl get svc -A\n" >> "${backupFolder}/k8s_stats.txt"
        $k get svc -A >> "${backupFolder}/k8s_stats.txt" 2>&1 || true
        echo -e "\n:: kubectl get deploy -A -o wide\n" >> "${backupFolder}/k8s_stats.txt"
        $k get deploy -A -o wide >> "${backupFolder}/k8s_stats.txt" 2>&1 || true
        $k get ingressroute --no-headers | awk '{print $1}' | while read z; do $k get ingressroute $z -o yaml > "${backupFolder}/k8s_ingressroute_${z}.yaml"; done || true
        $k get ingressroutetcp --no-headers | awk '{print $1}' | while read z; do $k get ingressroutetcp $z -o yaml > "${backupFolder}/k8s_ingressroutetcp_${z}.yaml"; done || true
        $k get ingressrouteudp --no-headers | awk '{print $1}' | while read z; do $k get ingressrouteudp $z -o yaml > "${backupFolder}/k8s_ingressrouteudp_${z}.yaml"; done || true
        $k get pod -n kube-system -l 'k8s-app=kube-dns' -o wide -o json > "${backupFolder}/k8s_kube-dns.json" || true
        $k get pod -n kube-system -l 'app.kubernetes.io/name=traefik' -o wide -o json > "${backupFolder}/k8s_traefik.json" || true
        $k get pod -n kube-system -l 'app.kubernetes.io/name=cert-manager' -o wide -o json > "${backupFolder}/k8s_cert-manager.json" || true
        $k get pod -n kube-system -l 'app.kubernetes.io/component=controller' -o wide -o json > "${backupFolder}/k8s_kube-controller-manager.json" || true
        $k get pod -n kube-system -l 'app.kubernetes.io/component=etcd' -o wide -o json > "${backupFolder}/k8s_kube-etcd.json" || true
        $k get pod -n kube-system -l 'app.kubernetes.io/component=kube-apiserver' -o wide -o json > "${backupFolder}/k8s_kube-apiserver.json" || true
        $k get pod -n kube-system -l 'app.kubernetes.io/component=kube-scheduler' -o wide -o json > "${backupFolder}/k8s_kube-scheduler.json" || true
        if [ -n "$extended" ]; then
                $k get ns -o wide -o yaml > "${backupFolder}/k8s_namespaces.yaml" || true
                $k get all -A -o wide -o yaml > "${backupFolder}/k8s_all.yaml" || true
                $k get ing -A -o wide -o yaml > "${backupFolder}/k8s_ingress.yaml" || true
                $k get cm -A -o wide -o yaml > "${backupFolder}/k8s_configmaps.yaml" || true
                $k get sc -A -o wide -o yaml > "${backupFolder}/k8s_storageclasses.yaml" || true
                $k get pv -A -o wide -o yaml > "${backupFolder}/k8s_persistentvolumes.yaml" || true
                $k get pvc -A -o wide -o yaml > "${backupFolder}/k8s_persistentvolumeclaims.yaml" || true
                $k get crd -A -o wide -o yaml > "${backupFolder}/k8s_customresourcedefinitions.yaml" || true
                $k get svcaccounts -A -o wide -o yaml > "${backupFolder}/k8s_serviceaccounts.yaml" || true
                $k get roles -A -o wide -o yaml > "${backupFolder}/k8s_roles.yaml" || true
                $k get rolebindings -A -o wide -o yaml > "${backupFolder}/k8s_rolebindings.yaml" || true
                $k get clusterroles -A -o wide -o yaml > "${backupFolder}/k8s_clusterroles.yaml" || true
                $k get clusterrolebindings -A -o wide -o yaml > "${backupFolder}/k8s_clusterrolebindings.yaml" || true
                $k get networkpolicies -A -o wide -o yaml > "${backupFolder}/k8s_networkpolicies.yaml" || true
                $k get secrets -A -o wide -o yaml > "${backupFolder}/k8s_secrets.yaml" || true
                $k get jobs -A -o wide -o yaml > "${backupFolder}/k8s_jobs.yaml" || true
                $k get cronjobs -A -o wide -o yaml > "${backupFolder}/k8s_cronjobs.yaml" || true
                $k get ingress -A -o wide -o yaml > "${backupFolder}/k8s_ingress_extended.yaml" || true
                $k get statefulsets -A -o wide -o yaml > "${backupFolder}/k8s_statefulsets.yaml" || true
                $k get daemonsets -A -o wide -o yaml > "${backupFolder}/k8s_daemonsets.yaml" || true
                $k get replicasets -A -o wide -o yaml > "${backupFolder}/k8s_replicasets.yaml" || true
                $k get deployments -A -o wide -o yaml > "${backupFolder}/k8s_deployments.yaml" || true
                $k get hpa -A -o wide -o yaml > "${backupFolder}/k8s_horizontalpodautoscalers.yaml" || true
                $k get networkpolicies -A -o wide -o yaml > "${backupFolder}/k8s_networkpolicies.yaml" || true
                $k get limitranges -A -o wide -o yaml > "${backupFolder}/k8s_limitranges.yaml" || true
                $k get leases -A -o wide -o yaml > "${backupFolder}/k8s_leases.yaml" || true
                $k get priorityclasses -A -o wide -o yaml > "${backupFolder}/k8s_priorityclasses.yaml" || true
                $k get poddisruptionbudget -A -o wide -o yaml > "${backupFolder}/k8s_poddisruptionbudget.yaml" || true
                $k get podsecuritypolicies -A -o wide -o yaml > "${backupFolder}/k8s_podsecuritypolicies.yaml" || true
                $k get podtemplates -A -o wide -o yaml > "${backupFolder}/k8s_podtemplates.yaml" || true
                $k get networkpolicies -A -o wide -o yaml > "${backupFolder}/k8s_networkpolicies.yaml" || true
                $k get networkpolicies -A -o wide -o yaml > "${backupFolder}/k8s_networkpolicies.yaml" || true
                $k get networkpolicies -A -o wide -o yaml > "${backupFolder}/k8s_networkpolicies.yaml" || true
                $k get networkpolicies -A -o wide -o yaml > "${backupFolder}/k8s_networkpolicies.yaml" || true
        fi
}

get_disks
get_k8s

